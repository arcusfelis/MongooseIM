.PHONY: all test console compile
all: test

# user overridable
TESTSPEC ?= default.spec
PRESET   ?= all
PREPARE  ?= prepare
ADD_OPTS ?= -sasl sasl_error_logger false -lager handlers []
TLS_DIST ?= no
REPO_DIR ?= ../..

# autogenerated, not intended for overriding
DEPS_PATHS := $(addprefix $(REPO_DIR)/_build/test/lib/,$(addsuffix /ebin,$(DEPS)))

ifeq ($(TLS_DIST),yes)
TLS_DIST_OPTS := -args_file vm.dist.args
else
TLS_DIST_OPTS :=
endif

COMMON_OPTS := -sname test -setcookie ejabberd -hidden \
               $(TLS_DIST_OPTS) \
               -pa `pwd`/tests \
                   `pwd`/ebin \
                   `pwd`/deps/*/ebin \
               $(DEPS_PATHS)

ifeq ($(shell uname), Linux)
SED := sed
else
SED := gsed
endif

test_clean: get-deps
	rm -rf tests/*.beam
	$(MAKE) test

cover_test_clean: get-deps
	rm -rf tests/*.beam
	$(MAKE) cover_test

quicktest: $(PREPARE)
	erl -noinput $(COMMON_OPTS) $(ADD_OPTS) \
		-s run_common_test main test=quick spec=$(TESTSPEC) \
		> $@.log 2>&1 || (cat $@.log; exit 1)

cover_quicktest: $(PREPARE)
	erl -noinput $(COMMON_OPTS) $(ADD_OPTS) \
		-s run_common_test main test=quick spec=$(TESTSPEC) cover=true \
		> $@.log 2>&1 || (cat $@.log; exit 1)

cover_test_preset: $(PREPARE)
	erl -noinput $(COMMON_OPTS) $(ADD_OPTS) \
		-s run_common_test main test=full spec=$(TESTSPEC) preset=$(PRESET) cover=true \
		> $@.log 2>&1 || (cat $@.log; exit 1)

cover_test: $(PREPARE)
	erl -noinput $(COMMON_OPTS) $(ADD_OPTS) \
		-s run_common_test main test=full spec=$(TESTSPEC) cover=true \
		> $@.log 2>&1 || (cat $@.log; exit 1)

test_preset: $(PREPARE)
	erl -noinput $(COMMON_OPTS) $(ADD_OPTS) \
		-s run_common_test main test=full spec=$(TESTSPEC) preset=$(PRESET) \
		> $@.log 2>&1 || (cat $@.log; exit 1)

test: $(PREPARE)
	erl -noinput $(COMMON_OPTS) $(ADD_OPTS) \
		-s run_common_test main test=full spec=$(TESTSPEC) \
		> $@.log 2>&1 || (cat $@.log; exit 1)

prepare: mim_ct_rest compile vm.dist.args
	erlc -Ideps/exml/include \
		 run_common_test.erl
	mkdir -p ct_report

mim_ct_rest: \
	$(REPO_DIR)/test/mim_ct_rest.erl \
	$(REPO_DIR)/test/mim_ct_rest_handler.erl \
	$(REPO_DIR)/test/mim_ct_sup.erl
	cp $^ src/

vm.dist.args: vm.dist.args.in certs
	$(SED) -e 's%__PWD__%$(PWD)%g' $< > $@

certs: priv/ssl/fake_cert.pem priv/ssl/fake_key.pem priv/ssl/cacert.pem

priv/ssl/fake_cert.pem priv/ssl/fake_key.pem priv/ssl/cacert.pem: \
  $(REPO_DIR)/tools/ssl/fake_cert.pem \
  $(REPO_DIR)/tools/ssl/fake_key.pem \
  $(REPO_DIR)/tools/ssl/ca/cacert.pem
	mkdir -p $(@D)
	cp $^ $(@D)/
	cat priv/ssl/fake_key.pem >> priv/ssl/fake_cert.pem

console: $(PREPARE)
	erl $(COMMON_OPTS) $(ADD_OPTS)

compile: get-deps
	./rebar compile > $@.log 2>&1 || (cat $@.log; exit 1)

get-deps: rebar
	./rebar get-deps > $@.log 2>&1 || (cat $@.log; exit 1)

clean: rebar
	-@rm priv/ssl/*
	-@rm -rf tests/*.beam > /dev/null 2>&1
	-@./rebar clean > /dev/null 2>&1

rebar:
	wget http://cloud.github.com/downloads/basho/rebar/rebar
	chmod u+x rebar
